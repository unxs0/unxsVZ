1	Autonomics	2	1	1247282803	1	1247283686	Autonomics refers to programmatic defined changes to container user bean\
counters (UBCs) or to the replication or migration of containers.\
\
<p>\
In a datacenter, node or container property list it maybe specified with values\
of <i>Yes</i> or <i>No</i>. If not specified then autonomics functions should\
not apply.\
\
<p>\
Related terms: Autonomics-Type
11	Autonomics-Type	2	1	1247283629	1	1247283699	Autonomics-Type refers to the unxsVZ type of programmatic defined changes to\
container user bean counters (UBCs) or to the replication or migration of\
containers.\
\
<p>\
In a datacenter, node or container property list it maybe specified with values\
of:\
<p>\
<i>Optimize</i><br>\
<i>MoveLocal</i><br>\
<i>MoveGlobal</i><br>\
<i>ElasticLocal</i><br>\
<i>ElasticGlobal</i><br>\
\
<p>\
<i>Optimize</i> refers to in place container UBC modification<br>\
<i>MoveLocal</i> refers to the automated moving of a container to another node\
in the same datacenter.<br>\
<i>MoveGlobal</i> same as MoveLocal but may include other datacenter nodes.<br>\
<i>ElasticLocal</i> refers to the automated expansion and shrinking of the\
number of functional group containers on nodes in same datacenter.<br>\
<i>ElasticGlobal</i> same as ElasticLocal but across datacenters<br>\
\
<p>\
Other property parameters will define how the autonomic type will be further\
defined for use by the autonomic action program.\
\
Related terms: Autonomics
12	cIPv4	2	1	1247285045	0	0	cIPv4 is a 4 octet IP number in string format.\
\
<p>\
Usually used in a node property table to specify the main public IP used by the\
hardware node (ex. eth0). Other IPs may exist and they are specified by\
cIPv4-eth1 for example. Usually hardware nodes have at least 2 IPs a datacenter\
private IP for inter-node high speed communication and another public IP for\
container connectivity of public services.\
\
<p>\
Node containers may have datacenter or node private IPs and therefore the node\
may provide DNAT/SNAT for the given container service. The iptables rules that\
provide for this are usually migratable via /etc/vz/conf/ mount/umount scripts.\
\
Related terms: cVEID.mount, cVEID.umount
21	WarningEmail	2	1	1247544704	1	1248441294	Used by autonomics subsystem to warn by set email of approaching limitations and\
other\
error or warning conditions that may be configured or use system defaults.\
\
<p>\
Accepted values: Single email or comma delimited list of email addresses.<br>\
Ex. supportgrp@unixservice.com,joe@hosting.co.uk\
\
<p>\
Scope: Can be set at the Datacenter, node or container level. \
\
\
<p>\
Related terms: Autonomics-PrivPagesWarnRatio and similar.
31	Autonomics-PrivPagesActRatio	2	1	1248440829	1	1248441133	Autonomics-PrivPagesActRatio refers to a ratio (a percent ratio but the\
tProperty value is only set as an integer from 0 to 100 with no % sign) that is\
used by the autonomics agent daemon.\
<p>\
Values: Integer from 0 to 100.\
<p>\
Context: Only used for nodes.\
<p>\
Other: The action taken will depend on the Autonomics-Type for the node. For\
example, if the type is <i>Move</i> then the largest privvmpages using container\
on that node will be migrated live to another hardware node that is below the\
warning level and setup to receive such containers.\
\
<p>\
Related terms: Autonomics, Autonomics-Type, Autonomics-PrivPagesWarnRatio and\
WarningEmail.
41	Autonomics-PrivPagesWarnRatio	2	1	1248441050	1	1248441098	Autonomics-PrivPagesWarnRatio refers to a ratio (a percent ratio but the\
tProperty value is only set as an integer from 0 to 100 with no % sign) that is\
used by the autonomics agent daemon.\
<p>\
Values: Integer from 0 to 100.\
<p>\
Context: Only used for nodes.\
<p>\
Other: The action taken will depend on the Autonomics-Type for the node and if\
the warning emails have been set. Usually when this warning ratio threshold is\
exceeded a warning email will be sent to both the node and the container warn\
email addresses.\
\
<p>\
Related terms: Autonomics, Autonomics-Type, Autonomics-PrivPagesActRatio and \
WarningEmail
51	cCryptMethod	2	1	1254436501	0	0	cCryptMethod refers to the method used to store the encrypted tAuthorize.cPasswd.\
\
<p>\
The values can be DES or MD5. MD5 should be used since it has a much stronger\
salt. The stronger salt protects against automated dictionary attacks of\
compromised login cookies. \
\
<p>\
This password is used by the unxsVZ backend and other interfaces as part of the\
login credentials. It is stored on the client browser as a cookie but also\
encrypted with a strong salt. Since web interfaces should be be SSL only this\
provides a relatively secure cgi login control scheme. The obvious attacks are\
O(n) dictionary based, running all possible salt values. This is of course very\
slow for the large MD5 salts.\
\
<p>\
Related terms: None
61	cSnapshotDir	2	1	1254436834	0	0	cSnapshotDir is used on LVM2 enabled systems. It sepecifies a partition\
different from the /vz LVM partition.\
\
<p>\
It is used by vzdump related job queue processing (see jobqueue.c) At this time\
cloning and OS template creation jobs.\
\
<p>\
Related terms: None
91	Container-Type	2	1	1259359016	1	1259359054	Container-Type is usually a hardware node exclusive restriction for the hosting\
of VENET device based containers or bridged layer-2 VETH device based\
containers. Currently hardware nodes are exclusively VENET or VETH. In the vast\
majority of the cases VENET containers should be preferred.\
\
<p>\
Acceptable values are:<br>\
VENET Only\
VETH Only\
\
<p>\
Related terms: VETH VENET uVeth
81	cuSyncPeriod	2	1	1254575155	1	1254696207	cuSyncPeriod is the period in seconds for keeping cloned containers in sync with\
their source container counterpart.\
\
<p>\
This value is used by the job queue for automated clone sync operations.\
\
<p>\
Related terms: none
101	DashGraph0	2	1	1269005107	0	0	DashGraph0
111	DashGraph1	2	1	1269005119	0	0	DashGraph1
121	DashGraph2	2	1	1269005128	0	0	DashGraph2
131	DashGraph0URL	2	1	1269005143	0	0	DashGraph0URL
141	DashGraph1URL	2	1	1269005153	0	0	DashGraph1URL
151	DashGraph2URL	2	1	1269005165	0	0	DashGraph2URL
161	cSSHOptions	2	1	1269005212	0	0	cSSHOptions
171	cSCPOptions	2	1	1269005228	0	0	cSCPOptions
201	cNodeTrafficDirURL	2	1	1269005396	0	0	cNodeTrafficDirURL
191	cTrafficDirURL	2	1	1269005327	0	0	cTrafficDirURL
211	cDatacenterTrafficDirURL	2	1	1269005432	0	0	cDatacenterTrafficDirURL
221	Contact	2	1	1269005839	0	0	Contact
231	Bandwidth	2	1	1269005859	0	0	Bandwidth
241	CostPerMonth	2	1	1269005888	0	0	CostPerMonth
251	MaxNodes	2	1	1269006026	0	0	MaxNodes
261	luInstalledDiskSpace	2	1	1269006271	1	1269264625	This is the df -k available disk space of the /vz partition. It is used for\
reports, system health monitoring and for the automated allocation of containers\
to hardware nodes.\
\
<p>\
<u>Related Terms</u>: luInstalledRam
271	luInstalledRam	2	1	1269006290	1	1269264700	This is the free -k total. It is used for\
reports, system health monitoring and for the automated allocation of containers\
to hardware nodes.\
\
<p>\
<u>Related Terms</u>: luInstalledDiskSpace
281	cWarningEmail	2	1	1269006318	0	0	Used by autonomics subsystem to warn by set email of approaching limitations and\
other\
error or warning conditions that may be configured or use system defaults.\
\
<p>\
Accepted values: Single email or comma delimited list of email addresses.<br>\
Ex. supportgrp@unixservice.com,joe@hosting.co.uk\
\
<p>\
Scope: Can be set at the Datacenter, node or container level. \
\
\
<p>\
Related terms: Autonomics-PrivPagesWarnRatio and similar.
291	vzcpucheck-nodepwr.fCPUUnits	2	1	1269006463	0	0	vzcpucheck-nodepwr.fCPUUnits
301	cPasswd	2	1	1269007100	0	0	cPasswd
311	cUBC	2	1	1269007310	0	0	jobqueue.c:\	GetContainerProp(uContainer,cUBC,cBuf);
321	cExtraNodeIP	2	1	1269007381	0	0	jobqueue.c:\	GetContainerProp(uContainer,"cExtraNodeIP",cExtraNodeIP);
331	cNodeIP	2	1	1269007462	0	0	jobqueue.c:\	GetContainerProp(uContainer,"cNodeIP",cExtraNodeIP);
341	cVEID.mount	2	1	1269007499	0	0	jobqueue.c:\	GetContainerProp(uContainer,"cVEID.mount",cTemplateName);
351	cNetmask	2	1	1269007548	0	0	jobqueue.c: GetContainerProp(uContainer,"cNetmask",cNetmask);
361	cPrivateIPs	2	1	1269007587	0	0	jobqueue.c: GetContainerProp(uContainer,"cPrivateIPs",cPrivateIPs);
371	cService1	2	1	1269007625	0	0	jobqueue.c: GetContainerProp(uContainer,"cService1",cService1);
381	cService2	2	1	1269007636	0	0	jobqueue.c: GetContainerProp(uContainer,"cService2",cService1);
391	cVEID.umount	2	1	1269007665	0	0	jobqueue.c: GetContainerProp(uContainer,"cVEID.umount",cTemplateName);
401	cVEID.start	2	1	1269007686	0	0	jobqueue.c: GetContainerProp(uContainer,"cVEID.start",cTemplateName);
411	cVEID.stop	2	1	1269007724	0	0	jobqueue.c: GetContainerProp(uContainer,"cVEID.stop",cTemplateName);
421	veinfo.uProcesses	2	1	1269007839	0	0	mainfunc.h: GetContainerProp(uContainer,"veinfo.uProcesses",cuProcesses);
431	Graph0	2	1	1269008044	0	0	tgroup.c:\	GetGroupProp(uGroup,"Graph0",cGraph0);\
tnode.c:\	GetNodeProp(uNode,"Graph0",cGraph0);
441	uDatacenter	2	1	1269008150	0	0	Unique datacenter ID number.
451	cLabel	2	1	1269008202	1	1269273238	Used by many tables. The generic name or label of a given table record.\
\
<p>\
In the tContainer context it is the OpenVZ name. It should usually be the lowest\
level of\
the FQDN cHostname for standardization.\
\
<p>\
Related terms: cHostname, uContainer.
461	uStatus	2	1	1269008368	0	0	The status of the record or the item referenced y the record.\
\
<p>\
Usually an index into tStatus to show the tStatus.cLabel.
471	uOwner	2	1	1269008532	0	0	The owner of the record. \
\
<p>\
An index into tClient via tClient.uClient to show the tClient.cLabel.
481	uCreatedBy	2	1	1269008728	0	0	The tClient organization contact (or other type of user) that created the record.\
\
<p>\
An index into tClient via tClient.uClient to show the tClient.cLabel.
491	uCreatedDate	2	1	1269008779	0	0	The date the record was created.
501	uModBy	2	1	1269008834	0	0	The last tClient organization contact (or other type of user) that modified the\
record.\
\
<p>\
An index into tClient via tClient.uClient to show the tClient.cLabel.
511	uModDate	2	1	1269008858	0	0	The date the record was modified.
521	Graph	2	1	1269100218	1	1269100358	Containers, nodes or datacenters that have been running for at least 5 mins will\
have an rrdtool graph generated by the root crontab via one the scripts shown\
below in a sample root crontab section:\
\
<p>\
<pre>\
#unxsVZ per container graphs\
*/5 * * * * sleep 20; nice /usr/local/sbin/vz_traffic_log.sh >>\
/var/log/unxsvzlog 2>&1;\
*/5 * * * * sleep 30; nice /usr/local/sbin/node_traffic_log.sh  >>\
/var/log/unxsvzlog 2>&1;\
*/5 * * * * sleep 40; nice /usr/local/sbin/datacenter_traffic_log.sh  >>\
/var/log/unxsvzlog 2>&1;\
</pre>\
\
<p>\
The node graph is a graph of all that node's container traffic collected via the\
venet\
interface data in /proc/net/dev/ special file.<br>\
The datacenter graph is an aggregation of all the traffic of all the\
datacenter's nodes.
531	uNode	2	1	1269265737	0	0	Unique hardware node ID number.
541	uContainer	2	1	1269271476	0	0	Unique container ID number that matches the underlying infrastructure OpenVZ\
VEID number.
551	cHostname	2	1	1269273515	0	0	Usually the FQDN of a container, especially if DNS is being used for the main\
IP. The OpenVZ hostname. If DNS is not being used then a cHostname like\
<i>staff.container</i> may provide some organizational and security benefits.\
\
<p>\
Related terms: cLabel, uContainer.
561	uVeth	2	1	1269273858	1	1269273902	Hardware nodes can be venet or veth based. All containers in a given hardware\
node must be one or the either. uVeth=0 means that the container is a standard\
venet container.\
\
<p>\
The use of veth based containers is an advanced OpenVZ feature and is not\
recommended at this time for use with unxsVZ.\
\
<p>\
Virtual Ethernet device is an Ethernet-like device which can be used inside a\
container. Unlike venet network device, veth device has a MAC address, therefore\
it can be used in configurations, when veth is bridged to ethX or other device\
and container's user fully sets up his networking himself, including IPs,\
gateways etc.\
\
<p>\
Virtual Ethernet device consist of two Ethernet devices -- the one in CT0 and\
another one in CT. These devices are connected to each other, so if a packet\
goes to one device it will come out from the other device. 
571	uIPv4	2	1	1269274040	0	0	An index into tIP showing tIP.cLabel. A standard IP version 4 number, four\
decimal octets separated by three periods. E.g. 10.12.2.77
581	uOSTemplate	2	1	1269274364	1	1269275044	An index into tOSTemplate  showing tOSTemplate.cLabel.\
\
<p>\
The OpenVZ vzctl --ostemplate argument value. It is the short form of the OS\
template file that resides on the hardware node in the  /vz/template/cache\
directory. The actual file has the .tar.gz. suffix added to the\
tOSTemplate.cLabel. Some unxsVZ operations require the existence of md5sum check\
sum files in md5sum -c format.\
\
<p>\
E.g. centos-5-x86-minimal would refer to the\
/vz/template/cache/centos-5-x86-minimal.tar.gz and\
/vz/template/cache/centos-5-x86-minimal.tar.gz.md5sum files.\
\
<p>\
Related terms: uConfig.
591	uConfig	2	1	1269274622	1	1269280519	An index into tConfig  showing tConfig.cLabel.\
\
<p>\
The OpenVZ vzctl --config argument value. It is the short form of the config\
template file that resides on the hardware node in the  /etc/vz/conf\
directory. The actual file has a .conf-sample suffix and a ve- prefix added to\
the tConfig.cLabel. After container creation the config template is the basis\
for the per container /etc/vz/conf/VIED.conf file.\
\
<p>\
E.g. freepbx26_v2 would refer to the /etc/vz/conf/ve-freepbx26_v2.conf-sample file.\
\
<p>\
Related terms: uConfig.
601	uNameserver	2	1	1269275305	1	1269275702	An index into tNamserver  showing tNameserver.cLabel.\
\
<p>\
The OpenVZ vzctl --nameserver argument value. Sets  the /etc/resolv.conf DNS \
server IP address for a container. It follows that the nameserver argument value\
is an IP address.\
\
<p>\
E.g. 10.0.0.1\
\
\
<p>\
Related terms: uIPv4, uSearchdomain
611	uSearchdomain	2	1	1269275632	0	0	An index into tSearchdomain showing the tSearchdomain.cLabel.\
\
<p>\
The OpenVZ vzctl --searchdomain argument value. Sets  the /etc/resolv.conf \
server searchdomain for a container. It follows that the nameserver argument\
value is a FQDN.\
\
<p>\
E.g. yourdomain.dom\
\
\
<p>\
Related terms: uNameserver
621	uAvailable	2	1	1269276128	0	0	Is a binary yes/no value that marks a given tIP number as used or not used.\
\
<p>\
Related terms: uIPv4
631	uIP	2	1	1269276205	0	0	Is the unique primary key index of tIP.\
\
<p>\
Related terms: uIPv4, uAvailable
641	uGroupType	2	1	1269276319	0	0	An index into tGroupType showing the tGroupType.cLabel.\
\
<p>\
It is used to associate a group with a goup type.\
\
<p>\
Related terms: uGroup
651	uGroup	2	1	1269276356	0	0	Is the unique primary key index of tGroup.\
\
<p>\
Related terms: uGroupType.
661	Container Comparison Report	2	1	1269297686	0	0	A main tab report that uses veinfo.uProcesses to provide information on\
container unxsVZ status versus actual status.\
\
<p>\
Covers the following issues:\
<p>\
-running<br>\
-stopped<br>\
-running but should be stopped<br>\
-stopped but should be running<br>\
-transitional state<br>\
-unexpected status<br>\
\

671	cInfo	2	1	1269297928	1	1269297936	Miscellaneous information about a company, organization or contact of the later.\
\
<p>\
The format and actual information depend on the organization's policy. Usually\
it would be phone numbers, office numbers, addresses and such.
681	cEmail	2	1	1269298018	0	0	Organization's or their contacts email address.\
\
<p>\
E.g. jsmith@company.org
691	cCode	2	1	1269298169	0	0	Used internally for distinguishing organizations from their contacts. May be\
extended in the near future for organization specific external user IDs or similar.
701	uJob	2	1	1269298279	0	0	The unique primary key index of tJob.
711	cJobName	2	1	1269298824	0	0	The jobqueue.c job name. The task to be queued in the job queue.\
\
<p>\
The following job names are currently in use (3/2010):\
\
<p>\
ActionScripts<br>\
ChangeHostnameContainer<br>\
ChangeIPContainer<br>\
CloneContainer<br>\
DestroyContainer<br>\
FailoverFrom<br>\
FailoverTo<br>\
LocalImportConfigJob<br>\
LocalImportTemplateJob<br>\
MigrateContainer<br>\
NewContainer<br>\
SetUBCJob<br>\
StartContainer<br>\
StopContainer<br>\
TemplateContainer<br>\
UpdateContainerUBCJob<br>\

721	cJobData	2	1	1269299037	0	0	Optional job data passed to job queue task functions. \
\
<p>\
Usually formatted in the following manner:\
\
<p>\
cSomeString=stringvalue;\
cAnotherParameter=1200;
731	uJobDate	2	1	1269299192	0	0	The date and time the job should run. Internally stored as a standard UNIX time\
stamp (time in seconds since UNIX epoch time 0.)\
\
E,.g: Mon Mar 22 18:03:57 2010 
741	uJobStatus	2	1	1269299381	0	0	An index into tJobStatus showing the tJobStatus.cLabel.\
\
<p>\
The following job statuses are currently in use (3/2010):\
\
<p>\
Waiting<br>\
Running<br>\
Done OK<br>\
Done Error(s)<br>\
Suspended<br>\
Redundant<br>\
Cancelled<br>\
RemoteWaiting<br>\
Error<br>
751	cRemoteMsg	2	1	1269299610	0	0	Usually an error message that is set by the job queue handler function when a\
job does not finish correctly. It also maybe some extended job "done ok" message.\
\
<p>\
When debugging you should take note of this message as well as any other logfile\
lines of interest and send them to your unxsVZ systems admin.
761	Containers not being cloned	2	1	1269471626	1	1290690838	A simple report consisting of a list of containers that are not configured for\
cloning. Or that having a clone, the clone is not configured for periodic rsync.\
\
<p>\
<u>More details</u>:\
\
<p>\
Cloned container can be setup as one-time snapshots and then periodically\
rsync'd. The rsync period is set in the cloned container's <i>cuSyncPeriod</i>\
property.
771	Cloned containers not updated	2	1	1290691465	1	1290691524	A simple report consisting of a list of containers that have clones, but \
where these clones have not been updated during the last hour.\
\
<p>\
<u>More details</u>:\
\
<p>\
Cloned container can be setup as one-time snapshots and then periodically\
rsync'd. The rsync period is set in the cloned container's <i>cuSyncPeriod</i>\
property. This list is useful for find problems with sub hour sync period clones.
781	Selected datacenter	2	1	1291666041	1	1291666063	Refers to the datacenter (roughly equivalent to a set of nodes) you are using as a \
property or will select for a given operation.\
\
<p>\
Related terms: Selected node, selected organization
791	Selected node	2	1	1291666125	0	0	Refers to the hardware node (roughly equivalent to a physical server or a set of \
containers) you are using as a \
property or will select for a given operation.\
\
<p>\
Related terms: Selected datacenter, selected organization
801	Selected organization	2	1	1291666261	0	0	Refers to the owner (see tClient) of the resource you are creating.\
\
<p>\
Related terms: Selected datacenter, selected node.
811	Select group	2	1	1291666476	0	0	Refers to an optional group (see tGroup), you will classify the resource you are \
creating under.\
\
<p>\
Related terms: Create new group.
821	Create job for unxsBind	2	1	1291666640	0	0	Some operations optionally allow (if unxsVZ has been so configured via \
tConfiguration) for associated unxsBind controlled DNS servers to be instructed to \
change (or update) DNS data.\
\

831	Optional password	2	1	1291667122	0	0	Optionally set a container's password (or if applicable the same password for multiple \
containers.) Only useful if container has root login services like ssh, or other \
<i>/etc/passwd</i> root based authorization services. For security reasons this is \
usually not recommended.
841	Clone target node	2	1	1291667257	0	0	If unxsVZ has been setup to require failover containers (cloned containers) you must \
specify the datacenter hardware node were the clone will be located. It must not be \
the same node being used for the source container.
851	Clone start uIPv4	2	1	1291667463	1	1291667619	If unxsVZ has been setup to require failover containers (cloned containers) you must \
specify the IPs the clone (or clones) will use. \
<p>\
You specify a start IP, if you are creating more than one container other unused IPs of \
the same class C will be assigned based on tIP.uIP order.\
<p>\
They must not be of the same class C \
as the IPs used by the source container (containers.) This last requirement is being \
reviewed as it may not be necessary with the latest versions of unxsVZ.
861	Keep clone stopped	2	1	1291667864	0	0	If unxsVZ has been setup to require failover containers (cloned containers) you must \
specify whether the cloned container(s) will be running or stopped. \
<p>\
Usually clones are kept stopped to save node system resources, and also since the \
sync operations can be performed faster and more reliably.\

871	Clone cuSyncPeriod	2	1	1291668194	0	0	If unxsVZ has been setup to require failover containers (cloned containers) you must \
specify the cloned container(s) rsync period in seconds. \
<p>\
0 seconds for no rsync operations. Special external rsync scripts are used and should be customized for specific container \
type sync requirements: Keeping in mind the period size, the number of files to be checked for incremental backup and the \
amount of data that needs to be transfered on each sync period.\

901	Time Zone	2	1	1294672872	1	1294673132	Refers to the Linux <i>locale</i> time zone that will be used for new container.\
<p>\
It is based on /usr/share/zoneinfo/ entries. The mapping is done via\
tConfiguration, with the following format:\
<p>\
cLabel='cTimeZone'\
<p>\
cValue= relative path to /etc/localtime compatible file based on\
/usr/share/zoneinfo/ root path.
911	uBackupDate	2	1	1305547112	0	0	The date the clone or app (uSource!=0) container was rsync'd with the source.
921	MCS_MOS	2	1	1309815540	1	1309815944	MyConnection test server daily minimum MOS value.\
<p>\
What is Mean Opinion Score (MOS)?\
<p>\
In voice and video communication, quality usually dictates whether the\
experience is a good or bad one. Besides the qualitative description we hear,\
like 'quite good' or 'very bad', there is a numerical method of expressing voice\
and video quality. It is called Mean Opinion Score (MOS). MOS gives a numerical\
indication of the perceived quality of the media received after being\
transmitted and eventually compressed using codecs.\
<p>\
MOS is expressed in one number, from 1 to 5, 1 being the worst and 5 the best.\
MOS is quite subjective, as it is based figures that result from what is\
perceived by people during tests. However, there are software applications that\
measure MOS on networks, as we see below.\
<p>\
The Mean Opinion Score Values\
<p>\
Taken in whole numbers, the numbers are quite easy to grade.\
<p>\
    * 5 - Perfect. Like face-to-face conversation or radio reception.<br>\
    * 4 - Fair. Imperfections can be perceived, but sound still clear. This is<br>\
(supposedly) the range for cell phones.<br>\
    * 3 - Annoying.<br>\
    * 2 - Very annoying. Nearly impossible to communicate.<br>\
    * 1 - Impossible to communicate<br>\
<p>\
The values do not need to be whole numbers. Certain thresholds and limits are\
often expressed in decimal values from this MOS spectrum. For instance, a value\
of 4.0 to 4.5 is referred to as toll-quality and causes complete satisfaction.\
This is the normal value of PSTN and many VoIP services aim at it, often with\
success. Values dropping below 3.5 are termed unacceptable by many users. 
891	Special OPs	2	1	1293627680	0	0	<u>Repurpose Container</u>\
<p>\
unxsvzOrg container panel special operation that renames an existing container\
from a pre-configured group of active containers (e.g. Idle PBXs). This\
container has no relation to any right panel loaded container. You must also\
select the base time zone.\
<p>\
This function uses a pre-configured domain name. Only the first part of\
the fully qualified domain name for the new container is entered. This name must\
be unique to the unxsVZ system being used. And will be input validated for\
illegal chars and max length.\
<p>\
Other as configured (in tConfiguration) options may appear.\
<p>\
The unxsVZ tech details are as follows:\
<p>\
1-. The new name is input validated.<br>\
2-. The new name is checked for uniqueness.<br>\
3-. A check of the job queue for any pending actions on the target container is\
made.<br>\
4-. A change hostname job is created.<br>\
5-. A unxsBind A record job is created.<br>\
6-. The container's group is changed to a preconfigured group (e.g. Production\
PBXs.)<br>\
7-. Any additional parameters are saved in tProperty.<br>
931	MCS_JitterUp	2	1	1309815820	31	1310395019	MyConnection test server daily maximum upstream jitter value as a percent.\
<p>\
Jitter is a variation in packet transit delay caused by queuing, contention and\
serialization effects on the path through the network.\
<p>\
There are several types of jitter:\
<p>\
(i) Type A – constant jitter. This is a roughly constant level of packet to\
packet delay variation. (ii) Type B – transient jitter. This is characterized by\
a substantial incremental delay that may be incurred by a single packet. (iii)\
Type C – short term delay variation. This is characterized by an increase in\
delay that persists for some number of packets, and may be accompanied by an\
increase in packet to packet delay variation. Type C jitter is commonly\
associated with congestion and route changes. \
<p>\
As with all MCS minimums and maximums the data is reset every day at\
approximately 0hs.
941	MCS_JitterDown	2	1	1309815841	31	1310395158	MyConnection test server daily maximum downstream jitter value as a percent.\
<p>\
Jitter is a variation in packet transit delay caused by queuing, contention and\
serialization effects on the path through the network.\
<p>\
There are several types of jitter:\
<p>\
(i) Type A – constant jitter. This is a roughly constant level of packet to\
packet delay variation. (ii) Type B – transient jitter. This is characterized by\
a substantial incremental delay that may be incurred by a single packet. (iii)\
Type C – short term delay variation. This is characterized by an increase in\
delay that persists for some number of packets, and may be accompanied by an\
increase in packet to packet delay variation. Type C jitter is commonly\
associated with congestion and route changes. \
<p>\
As with all MCS minimums and maximums the data is reset every day at\
approximately 0hs.
951	MCS_LossDown	2	1	1309815880	0	0	MyConnection test server daily maximum downstream packet loss value in percent.\
<p>\
As with all MCS minimums and maximums the data is reset every day at\
approximately 0hs.
961	MCS_LossUp	2	1	1309815901	0	0	MyConnection test server daily maximum upstream packet loss value in percent.\
<p>\
As with all MCS minimums and maximums the data is reset every day at\
approximately 0hs.
971	MCS_stddevMOS	2	31	1310395766	31	1310395851	MyConnection test server daily MOS standard deviation.\
<p>\
Standard deviation is a measurement of variability. It shows how much variation\
or "dispersion" there is from the average (mean, or expected value). A low\
standard deviation indicates that the data points tend to be very close to the\
mean, whereas high standard deviation indicates that the data are spread out\
over a large range of values.\
<p>\
If the stddevMOS value is low (under 0.1) then the avgMOS can be assumed to be\
close to the effective MOS for the given PBX gateway.\
<p>\
If on the other hand the stddevMOS value is high (over 0.2) then the avgMOS may\
not reflect the effective MOS. I.e. the call quality changes quite a bit during the\
day, and maybe a sign of "spiky" network congestion.
981	MCS_6JitterUp	2	71	1310398711	71	1310398745	MyConnection test server Sunday maximum upstream jitter value as a percent.\
<p>\
Jitter is a variation in packet transit delay caused by queuing, contention and\
serialization effects on the path through the network.\
<p>\
There are several types of jitter:\
<p>\
(i) Type A – constant jitter. This is a roughly constant level of packet to\
packet delay variation. (ii) Type B – transient jitter. This is characterized by\
a substantial incremental delay that may be incurred by a single packet. (iii)\
Type C – short term delay variation. This is characterized by an increase in\
delay that persists for some number of packets, and may be accompanied by an\
increase in packet to packet delay variation. Type C jitter is commonly\
associated with congestion and route changes. \
<p>\
As with all MCS minimums and maximums the data is reset every day at\
approximately 0hs.
991	MCS_5JitterUp	2	71	1310411516	0	0	MyConnection test server Saturday maximum upstream jitter value as a percent.\
<p>\
Jitter is a variation in packet transit delay caused by queuing, contention and\
serialization effects on the path through the network.\
<p>\
There are several types of jitter:\
<p>\
(i) Type A – constant jitter. This is a roughly constant level of packet to\
packet delay variation. (ii) Type B – transient jitter. This is characterized by\
a substantial incremental delay that may be incurred by a single packet. (iii)\
Type C – short term delay variation. This is characterized by an increase in\
delay that persists for some number of packets, and may be accompanied by an\
increase in packet to packet delay variation. Type C jitter is commonly\
associated with congestion and route changes. \
<p>\
As with all MCS minimums and maximums the data is reset every day at\
approximately 0hs.
1001	MCS_4JitterUp	2	71	1310411540	0	0	MyConnection test server Friday maximum upstream jitter value as a percent.\
<p>\
Jitter is a variation in packet transit delay caused by queuing, contention and\
serialization effects on the path through the network.\
<p>\
There are several types of jitter:\
<p>\
(i) Type A – constant jitter. This is a roughly constant level of packet to\
packet delay variation. (ii) Type B – transient jitter. This is characterized by\
a substantial incremental delay that may be incurred by a single packet. (iii)\
Type C – short term delay variation. This is characterized by an increase in\
delay that persists for some number of packets, and may be accompanied by an\
increase in packet to packet delay variation. Type C jitter is commonly\
associated with congestion and route changes. \
<p>\
As with all MCS minimums and maximums the data is reset every day at\
approximately 0hs.
1011	MCS_3JitterUp	2	71	1310411555	0	0	MyConnection test server Thursday maximum upstream jitter value as a percent.\
<p>\
Jitter is a variation in packet transit delay caused by queuing, contention and\
serialization effects on the path through the network.\
<p>\
There are several types of jitter:\
<p>\
(i) Type A – constant jitter. This is a roughly constant level of packet to\
packet delay variation. (ii) Type B – transient jitter. This is characterized by\
a substantial incremental delay that may be incurred by a single packet. (iii)\
Type C – short term delay variation. This is characterized by an increase in\
delay that persists for some number of packets, and may be accompanied by an\
increase in packet to packet delay variation. Type C jitter is commonly\
associated with congestion and route changes. \
<p>\
As with all MCS minimums and maximums the data is reset every day at\
approximately 0hs.
1021	MCS_2JitterUp	2	71	1310411580	0	0	MyConnection test server Wednesday maximum upstream jitter value as a percent.\
<p>\
Jitter is a variation in packet transit delay caused by queuing, contention and\
serialization effects on the path through the network.\
<p>\
There are several types of jitter:\
<p>\
(i) Type A – constant jitter. This is a roughly constant level of packet to\
packet delay variation. (ii) Type B – transient jitter. This is characterized by\
a substantial incremental delay that may be incurred by a single packet. (iii)\
Type C – short term delay variation. This is characterized by an increase in\
delay that persists for some number of packets, and may be accompanied by an\
increase in packet to packet delay variation. Type C jitter is commonly\
associated with congestion and route changes. \
<p>\
As with all MCS minimums and maximums the data is reset every day at\
approximately 0hs.
1031	MCS_1JitterUp	2	71	1310411596	0	0	MyConnection test server Tuesday maximum upstream jitter value as a percent.\
<p>\
Jitter is a variation in packet transit delay caused by queuing, contention and\
serialization effects on the path through the network.\
<p>\
There are several types of jitter:\
<p>\
(i) Type A – constant jitter. This is a roughly constant level of packet to\
packet delay variation. (ii) Type B – transient jitter. This is characterized by\
a substantial incremental delay that may be incurred by a single packet. (iii)\
Type C – short term delay variation. This is characterized by an increase in\
delay that persists for some number of packets, and may be accompanied by an\
increase in packet to packet delay variation. Type C jitter is commonly\
associated with congestion and route changes. \
<p>\
As with all MCS minimums and maximums the data is reset every day at\
approximately 0hs.
1041	MCS_0JitterUp	2	71	1310411623	0	0	MyConnection test server Monday maximum upstream jitter value as a percent.\
<p>\
Jitter is a variation in packet transit delay caused by queuing, contention and\
serialization effects on the path through the network.\
<p>\
There are several types of jitter:\
<p>\
(i) Type A – constant jitter. This is a roughly constant level of packet to\
packet delay variation. (ii) Type B – transient jitter. This is characterized by\
a substantial incremental delay that may be incurred by a single packet. (iii)\
Type C – short term delay variation. This is characterized by an increase in\
delay that persists for some number of packets, and may be accompanied by an\
increase in packet to packet delay variation. Type C jitter is commonly\
associated with congestion and route changes. \
<p>\
As with all MCS minimums and maximums the data is reset every day at\
approximately 0hs.
