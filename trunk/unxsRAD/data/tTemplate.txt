1	module.c	1	1	1346895231	0	0		/*\
FILE\
\	$Id: module.c 1955 2012-05-22 21:28:32Z Colin $\
PURPOSE\
\	Schema dependent RAD generated file.\
\	Program app functionality can be developed in {{cTableNameLC}}func.h\
\	while unxsRAD can still to be used to change this schema dependent file.\
AUTHOR\
\	(C) 2001-2012 Gary Wallis for Unixservice, LLC.\
TEMPLATE VARS AND FUNCTIONS\
\	ModuleCreateQuery\
\	ModuleInsertQuery\
\	ModuleListPrint\
\	ModuleListTable\
\	ModuleLoadVars\
\	ModuleProcVars\
\	ModuleRAD3Input\
\	ModuleUpdateQuery\
\	ModuleVars\
\	ModuleVarList\
\	cProject\
\	cTableKey\
\	cTableName\
\	cTableNameLC\
\	cTableTitle\
*/\
\
\
#include "mysqlrad.h"\
\
//Table Variables\
{{ModuleVars}}\
\
#define VAR_LIST_{{cTableName}} "{{ModuleVarList}}"\
\
 //Local only\
void Insert_{{cTableName}}(void);\
void Update_{{cTableName}}(char *cRowid);\
void Process{{cTableName}}ListVars(pentry entries[], int x);\
\
 //In {{cTableName}}func.h file included below\
void ExtProcess{{cTableName}}Vars(pentry entries[], int x);\
void Ext{{cTableName}}Commands(pentry entries[], int x);\
void Ext{{cTableName}}Buttons(void);\
void Ext{{cTableName}}NavBar(void);\
void Ext{{cTableName}}GetHook(entry gentries[], int x);\
void Ext{{cTableName}}Select(void);\
void Ext{{cTableName}}SelectRow(void);\
void Ext{{cTableName}}ListSelect(void);\
void Ext{{cTableName}}ListFilter(void);\
void Ext{{cTableName}}AuxTable(void);\
\
#include "{{cTableNameLC}}func.h"\
\
 //Table Variables Assignment Function\
void Process{{cTableName}}Vars(pentry entries[], int x)\
{\
\	register int i;\
\
\
\	for(i=0;i<x;i++)\
\	{\
\	\	{{ModuleProcVars}}\
\	}\
\
\	//After so we can overwrite form data if needed.\
\	ExtProcess{{cTableName}}Vars(entries,x);\
\
}//Process{{cTableName}}Vars()\
\
\
void Process{{cTableName}}ListVars(pentry entries[], int x)\
{\
        register int i;\
\
        for(i=0;i<x;i++)\
        {\
                if(!strncmp(entries[i].name,"ED",2))\
                {\
                        sscanf(entries[i].name+2,"%u",&{{cTableKey}});\
                        guMode=2002;\
                        {{cTableName}}("");\
                }\
        }\
}//void Process{{cTableName}}ListVars(pentry entries[], int x)\
\
\
int {{cTableName}}Commands(pentry entries[], int x)\
{\
\	ProcessControlVars(entries,x);\
\
\	Ext{{cTableName}}Commands(entries,x);\
\
\	if(!strcmp(gcFunction,"{{cTableName}}Tools"))\
\	{\
\	\	if(!strcmp(gcFind,LANG_NB_LIST))\
\	\	{\
\	\	\	{{cTableName}}List();\
\	\	}\
\
\	\	//Default\
\	\	Process{{cTableName}}Vars(entries,x);\
\	\	{{cTableName}}("");\
\	}\
\	else if(!strcmp(gcFunction,"{{cTableName}}List"))\
\	{\
\	\	ProcessControlVars(entries,x);\
\	\	Process{{cTableName}}ListVars(entries,x);\
\	\	{{cTableName}}List();\
\	}\
\
\	return(0);\
\
}//{{cTableName}}Commands()\
\
\
void {{cTableName}}(const char *cResult)\
{\
\	MYSQL_RES *res;\
\	MYSQL_RES *res2;\
\	MYSQL_ROW field;\
\
\	//Internal skip reloading\
\	if(!cResult[0])\
\	{\
\	\	if(guMode)\
\	\	\	Ext{{cTableName}}SelectRow();\
\	\	else\
\	\	\	Ext{{cTableName}}Select();\
\
\	\	mysql_query(&gMysql,gcQuery);\
\	\	if(mysql_errno(&gMysql))\
        \	{\
\	\	\	if(strstr(mysql_error(&gMysql)," doesn't exist"))\
                \	{\
\	\	\	\	Create{{cTableName}}();\
\	\	\	\	{{cProject}}("New {{cTableName}} table created");\
                \	}\
\	\	\	else\
\	\	\	{\
\	\	\	\	htmlPlainTextError(mysql_error(&gMysql));\
\	\	\	}\
        \	}\
\
\	\	res=mysql_store_result(&gMysql);\
\	\	if((guI=mysql_num_rows(res)))\
\	\	{\
\	\	\	if(guMode==6)\
\	\	\	{\
\	\	\	sprintf(gcQuery,"SELECT _rowid FROM {{cTableName}} WHERE {{cTableKey}}=%u"\
\	\	\	\	\	\	,{{cTableKey}});\
\	\	\	\	macro_mySQLRunAndStore(res2);\
\	\	\	\	field=mysql_fetch_row(res2);\
\	\	\	\	sscanf(field[0],"%lu",&gluRowid);\
\	\	\	\	gluRowid++;\
\	\	\	}\
\	\	\	PageMachine("",0,"");\
\	\	\	if(!guMode) mysql_data_seek(res,gluRowid-1);\
\	\	\	field=mysql_fetch_row(res);\
\	\	\	{{ModuleLoadVars}}\
\	\	}\
\
\	}//Internal Skip\
\
\	Header_ism3(":: {{cTableTitle}}",0);\
\	printf("<table width=100%% cellspacing=0 cellpadding=0>\\n");\
\	printf("<tr><td colspan=2 align=right valign=center>");\
\
\
\	printf("<input type=hidden name=gcFunction value={{cTableName}}Tools>");\
\	printf("<input type=hidden name=gluRowid value=%lu>",gluRowid);\
\	if(guI)\
\	{\
\	\	if(guMode==6)\
\	\	\	//printf(" Found");\
\	\	\	printf(LANG_NBR_FOUND);\
\	\	else if(guMode==5)\
\	\	\	//printf(" Modified");\
\	\	\	printf(LANG_NBR_MODIFIED);\
\	\	else if(guMode==4)\
\	\	\	//printf(" New");\
\	\	\	printf(LANG_NBR_NEW);\
\	\	printf(LANG_NBRF_SHOWING,gluRowid,guI);\
\	}\
\	else\
\	{\
\	\	if(!cResult[0])\
\	\	//printf(" No records found");\
\	\	printf(LANG_NBR_NORECS);\
\	}\
\	if(cResult[0]) printf("%s",cResult);\
\	printf("</td></tr>");\
\	printf("<tr><td valign=top width=25%%>");\
\
        Ext{{cTableName}}Buttons();\
\
        printf("</td><td valign=top>");\
\	//\
\	OpenFieldSet("{{cTableName}} Record Data",100);\
\
\	if(guMode==2000 || guMode==2002)\
\	\	{{cTableName}}Input(1);\
\	else\
\	\	{{cTableName}}Input(0);\
\
\	//\
\	CloseFieldSet();\
\
\	//Bottom table\
\	printf("<tr><td colspan=2>");\
        Ext{{cTableName}}AuxTable();\
\
\	Footer_ism3();\
\
}//end of {{cTableName}}();\
\
\
void {{cTableName}}Input(unsigned uMode)\
{\
\
\	{{ModuleRAD3Input}}\
\
}//void {{cTableName}}Input(unsigned uMode)\
\
\
void New{{cTableName}}(unsigned uMode)\
{\
\	register int i=0;\
\	MYSQL_RES *res;\
\
\	sprintf(gcQuery,"SELECT {{cTableKey}} FROM {{cTableName}} WHERE {{cTableKey}}=%u",{{cTableKey}});\
\	macro_mySQLRunAndStore(res);\
\	i=mysql_num_rows(res);\
\
\	if(i) \
\	\	{{cTableName}}(LANG_NBR_RECEXISTS);\
\
\	Insert_{{cTableName}}();\
\	{{cTableKey}}=mysql_insert_id(&gMysql);\
\	uCreatedDate=luGetCreatedDate("{{cTableName}}",{{cTableKey}});\
\	{{cProject}}Log({{cTableKey}},"{{cTableName}}","New");\
\
\	if(!uMode)\
\	{\
\	\	sprintf(gcQuery,LANG_NBR_NEWRECADDED,{{cTableKey}});\
\	\	{{cTableName}}(gcQuery);\
\	}\
\
}//New{{cTableName}}(unsigned uMode)\
\
\
void Delete{{cTableName}}(void)\
{\
\	sprintf(gcQuery,"DELETE FROM {{cTableName}} WHERE {{cTableKey}}=%u AND ( uOwner=%u OR %u>9 )"\
\	\	\	\	\	,{{cTableKey}},guLoginClient,guPermLevel);\
\	macro_mySQLQueryHTMLError;\
\	if(mysql_affected_rows(&gMysql)>0)\
\	{\
\	\	{{cProject}}Log({{cTableKey}},"{{cTableName}}","Del");\
\	\	{{cTableName}}(LANG_NBR_RECDELETED);\
\	}\
\	else\
\	{\
\	\	{{cProject}}Log({{cTableKey}},"{{cTableName}}","DelError");\
\	\	{{cTableName}}(LANG_NBR_RECNOTDELETED);\
\	}\
\
}//void Delete{{cTableName}}(void)\
\
\
void Insert_{{cTableName}}(void)\
{\
\	{{ModuleInsertQuery}}\
\	macro_mySQLQueryHTMLError;\
\
}//void Insert_{{cTableName}}(void)\
\
\
void Update_{{cTableName}}(char *cRowid)\
{\
\	{{ModuleUpdateQuery}}\
\	macro_mySQLQueryHTMLError;\
\
}//void Update_{{cTableName}}(void)\
\
\
void Mod{{cTableName}}(void)\
{\
\	register int i=0;\
\	MYSQL_RES *res;\
\	MYSQL_ROW field;\
\	unsigned uPreModDate=0;\
\
\	//Mod select gcQuery\
\	if(guPermLevel<10)\
\	sprintf(gcQuery,"SELECT {{cTableName}}.{{cTableKey}},"\
\	\	\	\	" {{cTableName}}.uModDate"\
\	\	\	\	" FROM {{cTableName}},tClient"\
\	\	\	\	" WHERE {{cTableName}}.{{cTableKey}}=%u"\
\	\	\	\	" AND {{cTableName}}.uOwner=tClient.uClient"\
\	\	\	\	" AND (tClient.uOwner=%u OR tClient.uClient=%u)"\
\	\	\	\	\	,{{cTableKey}},guLoginClient,guLoginClient);\
\	else\
\	sprintf(gcQuery,"SELECT {{cTableKey}},uModDate FROM {{cTableName}}"\
\	\	\	\	" WHERE {{cTableKey}}=%u"\
\	\	\	\	\	,{{cTableKey}});\
\
\	macro_mySQLRunAndStore(res);\
\	i=mysql_num_rows(res);\
\
\	if(i<1) {{cTableName}}(LANG_NBR_RECNOTEXIST);\
\	if(i>1) {{cTableName}}(LANG_NBR_MULTRECS);\
\
\	field=mysql_fetch_row(res);\
\	sscanf(field[1],"%u",&uPreModDate);\
\	if(uPreModDate!=uModDate) {{cTableName}}(LANG_NBR_EXTMOD);\
\
\	Update_{{cTableName}}(field[0]);\
\	sprintf(gcQuery,LANG_NBRF_REC_MODIFIED,field[0]);\
\	uModDate=luGetModDate("{{cTableName}}",{{cTableKey}});\
\	{{cProject}}Log({{cTableKey}},"{{cTableName}}","Mod");\
\	{{cTableName}}(gcQuery);\
\
}//Mod{{cTableName}}(void)\
\
\
void {{cTableName}}List(void)\
{\
\	MYSQL_RES *res;\
\	MYSQL_ROW field;\
\
\	Ext{{cTableName}}ListSelect();\
\
\	macro_mySQLRunAndStore(res);\
\	guI=mysql_num_rows(res);\
\
\	PageMachine("{{cTableName}}List",1,"");//1 is auto header list guMode. Opens table!\
\
\	//Filter select drop down\
\	Ext{{cTableName}}ListFilter();\
\
\	printf("<input type=text size=16 name=gcCommand maxlength=98 value=\\"%s\\" >",gcCommand);\
\
\	printf("</table>\\n");\
\
\	printf("<table bgcolor=#9BC1B3 border=0 width=100%%>\\n");\
\	{{ModuleListTable}}\
\
\	mysql_data_seek(res,guStart-1);\
\
\	for(guN=0;guN<(guEnd-guStart+1);guN++)\
\	{\
\	\	field=mysql_fetch_row(res);\
\	\	if(!field)\
\	\	{\
\	\	\	printf("<tr><td><font face=arial,helvetica>End of data</table>");\
\	\	\	Footer_ism3();\
\	\	}\
\	\	\	if(guN % 2)\
\	\	\	\	printf("<tr bgcolor=#BBE1D3>");\
\	\	\	else\
\	\	\	\	printf("<tr>");\
\	\	{{ModuleListPrint}}\
\	}\
\
\	printf("</table></form>\\n");\
\	Footer_ism3();\
\
}//{{cTableName}}List()\
\
\
{{ModuleCreateQuery}}\
	1	1
2	modulefunc.h	1	1	1346895231	0	0		/*\
FILE\
\	$Id: modulefunc.h 1956 2012-05-24 21:38:56Z Colin $\
PURPOSE\
\	Non schema-dependent table and application table related functions.\
AUTHOR\
\	(C) 2001-2012 Gary Wallis for Unixservice, LLC.\
TEMPLATE VARS AND FUNCTIONS\
\	ModuleFunctionProcess\
\	ModuleFunctionProtos\
\	cProject\
\	cTableKey\
\	cTableName\
*/\
\
{{ModuleFunctionProtos}}\
\
void {{cTableName}}NavList(void);\
\
void ExtProcess{{cTableName}}Vars(pentry entries[], int x)\
{\
\	/*\
\	register int i;\
\	for(i=0;i<x;i++)\
\	{\
\	}\
\	*/\
}//void ExtProcess{{cTableName}}Vars(pentry entries[], int x)\
\
\
void Ext{{cTableName}}Commands(pentry entries[], int x)\
{\
\
\	if(!strcmp(gcFunction,"{{cTableName}}Tools"))\
\	{\
\	\	{{ModuleFunctionProcess}}\
\	\	if(!strcmp(gcCommand,LANG_NB_NEW))\
                {\
\	\	\	if(guPermLevel>=9)\
\	\	\	{\
\	                        Process{{cTableName}}Vars(entries,x);\
                        \	guMode=2000;\
\	                        {{cTableName}}(LANG_NB_CONFIRMNEW);\
\	\	\	}\
\	\	\	else\
\	\	\	\	{{cTableName}}("<blink>Error</blink>: Denied by permissions settings");\
                }\
\	\	else if(!strcmp(gcCommand,LANG_NB_CONFIRMNEW))\
                {\
\	\	\	if(guPermLevel>=9)\
\	\	\	{\
\	\	\	\	unsigned uContactParentCompany=0;\
                        \	Process{{cTableName}}Vars(entries,x);\
\	\	\	\	GetClientOwner(guLoginClient,&uContactParentCompany);\
\	\	\	\	\
                        \	guMode=2000;\
\	\	\	\	//Check entries here\
                        \	guMode=0;\
\
\	\	\	\	{{cTableKey}}=0;\
\	\	\	\	uCreatedBy=guLoginClient;\
\	\	\	\	uOwner=uContactParentCompany;\
\	\	\	\	uModBy=0;//Never modified\
\	\	\	\	uModDate=0;//Never modified\
\	\	\	\	New{{cTableName}}(0);\
\	\	\	}\
\	\	\	else\
\	\	\	\	{{cTableName}}("<blink>Error</blink>: Denied by permissions settings");\
\	\	}\
\	\	else if(!strcmp(gcCommand,LANG_NB_DELETE))\
                {\
                        Process{{cTableName}}Vars(entries,x);\
\	\	\	if(uAllowDel(uOwner,uCreatedBy))\
\	\	\	{\
\	                        guMode=2001;\
\	\	\	\	{{cTableName}}(LANG_NB_CONFIRMDEL);\
\	\	\	}\
\	\	\	else\
\	\	\	\	{{cTableName}}("<blink>Error</blink>: Denied by permissions settings");\
                }\
                else if(!strcmp(gcCommand,LANG_NB_CONFIRMDEL))\
                {\
                        Process{{cTableName}}Vars(entries,x);\
\	\	\	if(uAllowDel(uOwner,uCreatedBy))\
\	\	\	{\
\	\	\	\	guMode=5;\
\	\	\	\	Delete{{cTableName}}();\
\	\	\	}\
\	\	\	else\
\	\	\	\	{{cTableName}}("<blink>Error</blink>: Denied by permissions settings");\
                }\
\	\	else if(!strcmp(gcCommand,LANG_NB_MODIFY))\
                {\
                        Process{{cTableName}}Vars(entries,x);\
\	\	\	if(uAllowMod(uOwner,uCreatedBy))\
\	\	\	{\
\	\	\	\	guMode=2002;\
\	\	\	\	{{cTableName}}(LANG_NB_CONFIRMMOD);\
\	\	\	}\
\	\	\	else\
\	\	\	\	{{cTableName}}("<blink>Error</blink>: Denied by permissions settings");\
                }\
                else if(!strcmp(gcCommand,LANG_NB_CONFIRMMOD))\
                {\
                        Process{{cTableName}}Vars(entries,x);\
\	\	\	if(uAllowMod(uOwner,uCreatedBy))\
\	\	\	{\
                        \	guMode=2002;\
\	\	\	\	//Check entries here\
                        \	guMode=0;\
\
\	\	\	\	uModBy=guLoginClient;\
\	\	\	\	Mod{{cTableName}}();\
\	\	\	}\
\	\	\	else\
\	\	\	\	{{cTableName}}("<blink>Error</blink>: Denied by permissions settings");\
                }\
\	}\
\
}//void Ext{{cTableName}}Commands(pentry entries[], int x)\
\
\
void Ext{{cTableName}}Buttons(void)\
{\
\	OpenFieldSet("{{cTableName}} Aux Panel",100);\
\	switch(guMode)\
        {\
                case 2000:\
\	\	\	printf("<p><u>Enter/mod data</u><br>");\
                        printf(LANG_NBB_CONFIRMNEW);\
                break;\
\
                case 2001:\
                        printf("<p><u>Think twice</u><br>");\
                        printf(LANG_NBB_CONFIRMDEL);\
                break;\
\
                case 2002:\
\	\	\	printf("<p><u>Review changes</u><br>");\
                        printf(LANG_NBB_CONFIRMMOD);\
                break;\
\
\	\	default:\
\	\	\	printf("<u>Table Tips</u><br>");\
\	\	\	printf("<p><u>Record Context Info</u><br>");\
\	\	\	printf("<p><u>Operations</u><br>");\
\	\	\	printf("<br><input type=submit class=largeButton title='Sample button help'"\
\	\	\	\	\	" name=gcCommand value='Sample Button'>");\
\	\	\	{{cTableName}}NavList();\
\	}\
\	CloseFieldSet();\
\
}//void Ext{{cTableName}}Buttons(void)\
\
\
void Ext{{cTableName}}AuxTable(void)\
{\
\
}//void Ext{{cTableName}}AuxTable(void)\
\
\
void Ext{{cTableName}}GetHook(entry gentries[], int x)\
{\
\	register int i;\
\
\	for(i=0;i<x;i++)\
\	{\
\	\	if(!strcmp(gentries[i].name,"{{cTableKey}}"))\
\	\	{\
\	\	\	sscanf(gentries[i].val,"%u",&{{cTableKey}});\
\	\	\	guMode=6;\
\	\	}\
\	}\
\	{{cTableName}}("");\
\
}//void Ext{{cTableName}}GetHook(entry gentries[], int x)\
\
\
void Ext{{cTableName}}Select(void)\
{\
\
\	unsigned uContactParentCompany=0;\
\
\	GetClientOwner(guLoginClient,&uContactParentCompany);\
\
\	if(guLoginClient==1 && guPermLevel>11)//Root can read access all\
\	\	sprintf(gcQuery,"SELECT %s FROM {{cTableName}} ORDER BY"\
\	\	\	\	" {{cTableKey}}",\
\	\	\	\	VAR_LIST_{{cTableName}});\
\	else //If you own it, the company you work for owns the company that owns it,\
\	\	//you created it, or your company owns it you can at least read access it\
\	\	//select tTemplateSet.cLabel from tTemplateSet,tClient where tTemplateSet.uOwner=tClient.uClient and tClient.uOwner in (select uClient from tClient where uOwner=81 or uClient=51);\
\	sprintf(gcQuery,"SELECT %s FROM {{cTableName}},tClient WHERE {{cTableName}}.uOwner=tClient.uClient"\
\	\	\	\	" AND tClient.uOwner IN (SELECT uClient FROM tClient WHERE uOwner=%u OR uClient=%u)"\
\	\	\	\	" ORDER BY {{cTableKey}}",\
\	\	\	\	\	VAR_LIST_{{cTableName}},uContactParentCompany,uContactParentCompany);\
\	\	\	\	\	\
\
}//void Ext{{cTableName}}Select(void)\
\
\
void Ext{{cTableName}}SelectRow(void)\
{\
\	unsigned uContactParentCompany=0;\
\
\	GetClientOwner(guLoginClient,&uContactParentCompany);\
\
\	if(guLoginClient==1 && guPermLevel>11)//Root can read access all\
                sprintf(gcQuery,"SELECT %s FROM {{cTableName}} WHERE {{cTableKey}}=%u",\
\	\	\	VAR_LIST_{{cTableName}},{{cTableKey}});\
\	else\
                sprintf(gcQuery,"SELECT %s FROM {{cTableName}},tClient"\
                                " WHERE {{cTableName}}.uOwner=tClient.uClient"\
\	\	\	\	" AND tClient.uOwner IN (SELECT uClient FROM tClient WHERE uOwner=%u OR uClient=%u)"\
\	\	\	\	" AND {{cTableName}}.{{cTableKey}}=%u",\
                        \	\	VAR_LIST_{{cTableName}}\
\	\	\	\	\	,uContactParentCompany,uContactParentCompany\
\	\	\	\	\	,{{cTableKey}});\
\
}//void Ext{{cTableName}}SelectRow(void)\
\
\
void Ext{{cTableName}}ListSelect(void)\
{\
\	char cCat[512];\
\	unsigned uContactParentCompany=0;\
\	\
\	GetClientOwner(guLoginClient,&uContactParentCompany);\
\
\	if(guLoginClient==1 && guPermLevel>11)//Root can read access all\
\	\	sprintf(gcQuery,"SELECT %s FROM {{cTableName}}",\
\	\	\	\	VAR_LIST_{{cTableName}});\
\	else\
\	\	sprintf(gcQuery,"SELECT %s FROM {{cTableName}},tClient"\
\	\	\	\	" WHERE {{cTableName}}.uOwner=tClient.uClient"\
\	\	\	\	" AND tClient.uOwner IN (SELECT uClient FROM tClient WHERE uOwner=%u OR uClient=%u)",\
\	\	\	\	VAR_LIST_{{cTableName}}\
\	\	\	\	,uContactParentCompany\
\	\	\	\	,uContactParentCompany);\
\
\	//Changes here must be reflected below in Ext{{cTableName}}ListFilter()\
        if(!strcmp(gcFilter,"{{cTableKey}}"))\
        {\
                sscanf(gcCommand,"%u",&{{cTableKey}});\
\	\	if(guPermLevel<10)\
\	\	\	strcat(gcQuery," AND ");\
\	\	else\
\	\	\	strcat(gcQuery," WHERE ");\
\	\	sprintf(cCat,"{{cTableName}}.{{cTableKey}}=%u"\
\	\	\	\	\	\	" ORDER BY {{cTableKey}}",\
\	\	\	\	\	\	{{cTableKey}});\
\	\	strcat(gcQuery,cCat);\
        }\
        else if(1)\
        {\
                //None NO FILTER\
                strcpy(gcFilter,"None");\
\	\	strcat(gcQuery," ORDER BY {{cTableKey}}");\
        }\
\
}//void Ext{{cTableName}}ListSelect(void)\
\
\
void Ext{{cTableName}}ListFilter(void)\
{\
        //Filter\
        printf("&nbsp;&nbsp;&nbsp;Filter on ");\
        printf("<select name=gcFilter>");\
        if(strcmp(gcFilter,"{{cTableKey}}"))\
                printf("<option>{{cTableKey}}</option>");\
        else\
                printf("<option selected>{{cTableKey}}</option>");\
        if(strcmp(gcFilter,"None"))\
                printf("<option>None</option>");\
        else\
                printf("<option selected>None</option>");\
        printf("</select>");\
\
}//void Ext{{cTableName}}ListFilter(void)\
\
\
void Ext{{cTableName}}NavBar(void)\
{\
\	printf(LANG_NBB_SKIPFIRST);\
\	printf(LANG_NBB_SKIPBACK);\
\	printf(LANG_NBB_SEARCH);\
\
\	if(guPermLevel>=7 && !guListMode)\
\	\	printf(LANG_NBB_NEW);\
\
\	if(uAllowMod(uOwner,uCreatedBy))\
\	\	printf(LANG_NBB_MODIFY);\
\
\	if(uAllowDel(uOwner,uCreatedBy)) \
\	\	printf(LANG_NBB_DELETE);\
\
\	if(uOwner)\
\	\	printf(LANG_NBB_LIST);\
\
\	printf(LANG_NBB_SKIPNEXT);\
\	printf(LANG_NBB_SKIPLAST);\
\	printf("&nbsp;&nbsp;&nbsp;\\n");\
\
}//void Ext{{cTableName}}NavBar(void)\
\
\
void {{cTableName}}NavList(void)\
{\
        MYSQL_RES *res;\
        MYSQL_ROW field;\
\	unsigned uContactParentCompany=0;\
\
\	GetClientOwner(guLoginClient,&uContactParentCompany);\
\	GetClientOwner(uContactParentCompany,&guReseller);//Get owner of your owner...\
\	if(guReseller==1) guReseller=0;//...except Root companies\
\	\
\	if(guLoginClient==1 && guPermLevel>11)//Root can read access all\
\	\	sprintf(gcQuery,"SELECT {{cTableKey}},cLabel FROM {{cTableName}} ORDER BY cLabel");\
\	else\
\	\	sprintf(gcQuery,"SELECT {{cTableName}}.{{cTableKey}},"\
\	\	\	\	" {{cTableName}}.cLabel"\
\	\	\	\	" FROM {{cTableName}},tClient"\
\	\	\	\	" WHERE {{cTableName}}.uOwner=tClient.uClient"\
\	\	\	\	" AND tClient.uOwner IN (SELECT uClient FROM tClient WHERE uOwner=%u OR uClient=%u)",\
\	\	\	\	uContactParentCompany\
\	\	\	\	,uContactParentCompany);\
        mysql_query(&gMysql,gcQuery);\
        if(mysql_errno(&gMysql))\
        {\
        \	printf("<p><u>{{cTableName}}NavList</u><br>\\n");\
                printf("%s",mysql_error(&gMysql));\
                return;\
        }\
\
        res=mysql_store_result(&gMysql);\
\	if(mysql_num_rows(res))\
\	{\	\
        \	printf("<p><u>{{cTableName}}NavList</u><br>\\n");\
\
\	        while((field=mysql_fetch_row(res)))\
\	\	\	printf("<a class=darkLink href={{cProject}}.cgi?gcFunction={{cTableName}}"\
\	\	\	\	"&{{cTableKey}}=%s>%s</a><br>\\n",\
\	\	\	\	field[0],field[1]);\
\	}\
        mysql_free_result(res);\
\
}//void {{cTableName}}NavList(void)\
\
\
	1	1
